@page "/Shopping"

@using polichousehold.Services
@using polichousehold.Data
@using polichousehold.Models
@using polichousehold.Utilities
@using Microsoft.AspNetCore.Components.Forms

@inject ShoppingService shoppingService
@inject IFileUploadService fileService

@namespace polichousehold

<PageTitle>Shopping List</PageTitle>
<AuthorizeView Context="authContext">
    <h1>Things for Curtis to buy on the walk home</h1>

    <table>
        @if (shoppinglist.Count > 0)
        {
        <tr>
            <th>Quantity</th>
            <th>Item</th>
            <th>Image</th>
            <th>Update</th>
            <th>Delete</th>
        </tr>
        }
        @foreach (var item in shoppinglist)
        {
            <tr>
                <td><input @bind="item.Amount" /></td>
                <td><input @bind="item.Name" /></td>
                <td>
                @if (!string.IsNullOrEmpty(item.ImagePath))
                {
                    <img src="Uploads/\@item.ImagePath" asp-append-version="true" width="300px" />
                }
                else
                {
                    <EditForm Model="@imageModel" OnValidSubmit="() => HandleFormSubmit(item)" Context="formContext">
                        File:<InputFile OnChange="@SelectFiles"/>
                        <button type="submit">Upload</button>
                    </EditForm>
                    @if (uploading)
                    {
                        <span>Uploading...</span>
                    }
                }
                </td>
                <td><button @onclick="() => UpdateItem(item.ID, item.Name, item.Amount)">Update Item</button></td>
                <td><button @onclick="() => DeleteItem(item.ID)">Delete Item </button></td>
            </tr>
        } <!-- The button needs a lambda onclick to pass the arguments to the function -->
    </table>

    <p></p><p></p>
    <!-- Binding is very cool I love this feature -->
    <input type="number" placeholder="Quantity" min="1" @bind=newAmount />
    <input placeholder="Item" @bind="newItem" />
    <button @onclick="AddItem">Add to list</button>

</AuthorizeView>

@code
{
    // Empty list for the moment
    private List<ShoppingItem> shoppinglist = new List<ShoppingItem>();
    private string? newItem;
    private int newAmount;

    // For the file uploading
    bool uploading = false;
    List<IBrowserFile> files = new();
    int maxFileSize = 1 * 1024 * 1024;
    ImageFile imageModel = new();

    protected override async Task OnInitializedAsync()
    {
        // Need to instantiate on Init or it won't work
        RefreshList();
    }

    private void RefreshList()
    {
        shoppinglist = shoppingService.GetAll();
    }

    private void AddItem()
    {
        if (!string.IsNullOrEmpty(newItem) && newAmount > 0)
        {
            shoppingService.Create(new ShoppingItem { Name = newItem, Amount = newAmount});
            newItem = "";
            newAmount = 0;
            RefreshList();
        }
    }

    private void DeleteItem(int ID)
    {
        shoppingService.DeleteById(ID);
        RefreshList();
    }

    private void UpdateItem(int ID, string name, int amount)
    {
        shoppingService.Update(ID, name, amount);
        RefreshList();
    }

    private void AddImageToItem(int ID, string imageName)
    {
        shoppingService.UpdateImage(ID, imageName);
        RefreshList();
    }

    private async void SelectFiles(InputFileChangeEventArgs e)
    {
        files = e.GetMultipleFiles(maxFileSize).ToList();
    }

    private async Task HandleFormSubmit(ShoppingItem item)
    {
        uploading = true;
        var allowedExtenstions = new string[] { ".png", ".jpg", ".jpeg", ".gif" };
        // This should be only one image but making sure.
        foreach (var file in files)
        {
            try
            {
                (int statusCode, string statusMessage) = await fileService.UploadFileAsync(file, maxFileSize, allowedExtenstions);
                if (statusCode == 1)
                    AddImageToItem(item.ID, statusMessage);
                else
                    Console.WriteLine($"Image status code: {statusMessage}");

            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"Error : {ex.Message}");
            }
        }

        uploading = false;
    }
}
