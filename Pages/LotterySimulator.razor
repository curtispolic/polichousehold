@page "/Lottery"

@using polichousehold.Models

@namespace polichousehold

<PageTitle>Lottery Simulator</PageTitle>
<AuthorizeView Context="authContext">
    <h1>Powerball simulator for Gen &lt3</h1>

    Numbers:
    <input type="number" placeholder="1" min="1" max="45" @bind=formNumbers[0] />
    <input type="number" placeholder="2" min="1" max="45" @bind=formNumbers[1] />
    <input type="number" placeholder="3" min="1" max="45" @bind=formNumbers[2] />
    <input type="number" placeholder="4" min="1" max="45" @bind=formNumbers[3] />
    <input type="number" placeholder="5" min="1" max="45" @bind=formNumbers[4] />
    <input type="number" placeholder="6" min="1" max="45" @bind=formNumbers[5] />
    <input type="number" placeholder="7" min="1" max="45" @bind=formNumbers[6] />
    Powerball:
    <input type="number" placeholder="1" min="1" max="20" @bind=formPowerball />
    <button class="btn-secondary" type="button" @onclick="AddTicket">Add Ticket</button>

    <p></p>

    Random Tickets:
    <input type="number" placeholder="1" min="1" @bind=randomTicketNumber />
    <button class="btn-secondary" type="button" @onclick="RandomTicket">Add Random Tickets</button>

    <p></p>

    Draws:
    <input type="number" placeholder="1" min="1" @bind=drawNumber />
    <button class="btn-secondary" type="button" @onclick="DoDraws">Do Draws</button>

    <p></p>

    Division 1 Prize:
    <input type="number" placeholder="4000000" min="1" @bind=divisionPrizes[1] />

    <h2 style="color: red;">@message</h2>

    <b>With @ticketList.Count tickets and over @drawList.Count draws, you've won the following:</b>
    <ul>
        @if (divisionWins[1] > 0)
        {
            <li>@divisionWins[1] Division 1 prize(s)</li>
        }
        @if (divisionWins[2] > 0)
        {
            <li>@divisionWins[2] Division 2 prize(s)</li>
        }
        @if (divisionWins[3] > 0)
        {
            <li>@divisionWins[3] Division 3 prize(s)</li>
        }
        @if (divisionWins[4] > 0)
        {
            <li>@divisionWins[4] Division 4 prize(s)</li>
        }
        @if (divisionWins[5] > 0)
        {
            <li>@divisionWins[5] Division 5 prize(s)</li>
        }
        @if (divisionWins[6] > 0)
        {
            <li>@divisionWins[6] Division 6 prize(s)</li>
        }
        @if (divisionWins[7] > 0)
        {
            <li>@divisionWins[7] Division 7 prize(s)</li>
        }
        @if (divisionWins[8] > 0)
        {
            <li>@divisionWins[8] Division 8 prize(s)</li>
        }
        @if (divisionWins[9] > 0)
        {
            <li>@divisionWins[9] Division 9 prize(s)</li>
        }
    </ul>

    With the Divison 1 Prize being the above amount, and using the average Division 2 - 9 prizes, the following would be true:

    <ul>
        <li>You would have won $@PrizeAmount().ToString("N2") AUD</li>
        <li>At $16.15 for 12 games, you would have spent roughly $@SpentAmount().ToString("N2") AUD</li>
        <li>You would have waited @drawList.Count() weeks, or @(drawList.Count()/52) years</li>
        @if (DeltaAmount() > 0)
        {
            <li>You would have had a net gain of <b>$@DeltaAmount().ToString("N2")</b></li>
        }
        else if (DeltaAmount() < 0)
        {
            <li>You would have had a net loss of <b>$@((DeltaAmount()*-1).ToString("N2"))</b></li>
        }
        
    </ul> 

    <p></p>
    <table>
        <tr>
            <td>
                <b>Tickets</b>
            </td>
            <td>
                <b>Draws</b>
            </td>
        </tr>
        <tr valign="top">
            <td>
                <!-- Table displaying the tickets -->
                <table style="width: 450px">
                    <!-- Section displayed if there is a selected draw -->
                    @if (ticketList.Count > 0 && selected)
                    {
                        <tr>
                            <th colspan="7">Numbers</th>
                            <th style="width: 20%">Powerball</th>
                        </tr>
                         @foreach (var ticket in ticketList)
                        {
                            <tr style="border: 1px solid;">
                                @foreach (var number in ticket.Numbers)
                                {
                                    @if (selectedDraw.Numbers.Contains(number))
                                    {
                                        <td style="background-color:rgb(250, 165, 246);">@number</td>
                                    }
                                    else
                                    {
                                        <td>@number</td>
                                    }  
                                }
                                @if (selectedDraw.Powerball == ticket.Powerball)
                                {
                                    <td style="background-color:rgb(250, 165, 246);
                                    border: 1px solid; text-align: center;">@ticket.Powerball</td>
                                }
                                else
                                {
                                    <td style="border: 1px solid; text-align: center;">@ticket.Powerball</td>
                                }  
                            </tr>
                        }
                    }
                    <!-- Section displayed if there is not a selected draw -->
                    @if (ticketList.Count > 0 && !selected)
                    {
                        <tr>
                            <th colspan="7">Numbers</th>
                            <th style="width: 20%">Powerball</th>
                        </tr>
                         @foreach (var ticket in ticketList)
                        {
                            <tr style="border: 1px solid;">
                                @foreach (var number in ticket.Numbers)
                                {
                                    <td>@number</td>
                                }
                                <td style="border: 1px solid; text-align: center;">@ticket.Powerball</td>
                            </tr>
                        }
                    }
                </table>
            </td>
            <td>
                <!-- Table displaying the draws -->
                <table style="width: 450px">
                    <!-- Header -->
                    @if (drawList.Count > 0)
                    {
                        <tr>
                            <th colspan="7">Numbers</th>
                            <th style="width: 20%">Powerball</th>
                            <th>Select Draw</th>
                        </tr>
                    }
                    <!-- Section for a selected draw -->
                    @if (selected)
                    {
                        @foreach (var draw in drawList)
                        {
                            // Drawing the selected draw
                            @if (draw == selectedDraw)
                            {
                                <tr style="background-color:rgb(250, 165, 246); border: 1px solid;">
                                    @foreach (var number in draw.Numbers)
                                    {
                                        <td>@number</td>
                                    }
                                    <td style="border: 1px solid; text-align: center;">@draw.Powerball</td>
                                    <td style="border: 1px solid; text-align: center;">
                                        <button class="btn-secondary" type="button" @onclick="() => SelectDraw(draw)">Select</button>
                                    </td>
                                </tr>
                            }
                            else
                            {
                                <tr style="border: 1px solid;">
                                    @foreach (var number in draw.Numbers)
                                    {
                                        <td>@number</td>
                                    }
                                    <td style="border: 1px solid; text-align: center;">@draw.Powerball</td>
                                    <td style="border: 1px solid; text-align: center;">
                                        <button class="btn-secondary" type="button" @onclick="() => SelectDraw(draw)">Select</button>
                                    </td>
                                </tr>
                            }
                        }
                    }
                    // Section for no selected draw
                    else
                    {
                        @foreach (var draw in drawList)
                        {
                            <tr style="border: 1px solid;">
                                @foreach (var number in draw.Numbers)
                                {
                                    <td>@number</td>
                                }
                                <td style="border: 1px solid; text-align: center;">@draw.Powerball</td>
                                <td style="text-align: center; border: 1px solid;">
                                    <button class="btn-secondary" type="button" @onclick="() => SelectDraw(draw)">Select</button>
                                </td>
                            </tr>
                        }
                    }
                </table>
            </td>
        </tr>
    </table>
    <p></p><p></p>
</AuthorizeView>

@code
{
    private List<int> formNumbers = new List<int> { 0, 0, 0, 0, 0, 0, 0};
    private int formPowerball = 0;
    private int drawNumber = 0;
    private int randomTicketNumber = 0;
    private List<LotteryTicket> ticketList = new();
    // Yes I am using the same Object for my draws, they're the same pretty much
    private List<LotteryTicket> drawList = new();
    // The random selected will not be used because of the bool
    // I could have made this nullable but then there are warnings of accessing a potentially null field
    private LotteryTicket selectedDraw = new();
    private List<int> divisionWins = new List<int> {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}; 
    private List<int> divisionPrizes = new List<int>
        // TODO: Replace [1] with the jackpot amount
        { 0, 4000000, 150000, 12000, 500, 190, 80, 47, 20, 12};
    private bool selected = false;
    private string message = "";

    private void RefreshWins()
    /*
    Counts the number of wins for each division over the entire set of tickets
    Should be called every time the number of tickets or draws changes
    */
    {
        divisionWins = new List<int> {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        foreach (var ticket in ticketList)
        {
            foreach (var draw in drawList)
            {
                divisionWins[ticket.DivisionWin(draw.Numbers, draw.Powerball)]++;
            }
        }
    }
    
    private void AddTicket()
    // Makes a ticket using the selectors
    {
        if (CheckNumbersAreUnique(formNumbers))
        {
            ticketList.Add(new LotteryTicket(formNumbers, formPowerball));
            RefreshWins();
        }
    }

    private void RandomTicket()
    // Makes x random tickets where x is the bound integer in the form
    {
        for (int i = 0; i < randomTicketNumber; i++)
        {
            ticketList.Add(new LotteryTicket());
        }
        RefreshWins();
        message = "";
    }

    private bool CheckNumbersAreUnique(List<int> numbers)
    // Checks that there are no repeated numbers in the list
    {
        List<int> uniques = new();
        foreach (var number in numbers)
        {
            if (uniques.Contains(number))
            {
                message = "Numbers must be unique";
                return false;
            }
            else
            {
                uniques.Add(number);
            }
        }
        message = "";
        return true;
    }

    private void DoDraws()
    // Creates x draws where x is the bound integer
    {
        for (int i = 0; i < drawNumber; i++)
        {
            drawList.Add(new LotteryTicket());
        }
        RefreshWins();
    }

    private void SelectDraw(LotteryTicket draw)
    // Selects a draw, will also flag that something is selected to prevent a null reference
    {
        selectedDraw = draw;
        selected = true;
    }

    private decimal PrizeAmount()
    {
        decimal temp = 0;
        for (int i = 1; i < 10; i++)
        {
            temp += divisionPrizes[i]*divisionWins[i];
        }

        return decimal.Round(temp, 2)*1.00m;
    }

    private decimal SpentAmount()
    {
        return decimal.Round(ticketList.Count()*drawList.Count()*1.34583333m, 2 , MidpointRounding.AwayFromZero);
    }

    private decimal DeltaAmount()
    {
        return PrizeAmount() - SpentAmount();
    }
}